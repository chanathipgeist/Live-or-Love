import streamlit as st
import pandas as pd
import pickle
import json

# Load model ‡πÇ‡∏´‡∏•‡∏î model ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
with open('adaboost_model.pkl', 'rb') as file:
    adaboost = pickle.load(file)

# Load the questions from the JSON file ‡πÇ‡∏´‡∏•‡∏î ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
with open('questions.json', 'r') as file:
    questions = json.load(file)
    

# Main function to run the web app
def main():
    st.title('üíî Live or Love: Divorce Predictor Dataset üíç')
    st.write('‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡∏Ñ‡∏π‡πà‡∏à‡∏∞ "‡∏≠‡∏¢‡∏π‡πà" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏à‡∏≤‡∏Å"!!!')
    st.write('Please answer the following questions:')
    st.title('How to Play')
    st.write('‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á 54 ‡∏Ç‡πâ‡∏≠ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏û‡∏®‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏¢ ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏Ñ‡∏ô‡∏°‡∏≤ 170 ‡∏Ñ‡∏ô')
    st.write('‡πÄ‡∏≠‡∏≤‡∏•‡πà‡∏∞! ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡πÑ‡∏õ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢!!!')
    st.title('Start!')
    # Create a dictionary to store answers ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    answers = {}

    # Display the questions and collect answers
    for i, (atr_name, question) in enumerate(questions.items(), start=1):
        st.markdown(f'<span style="font-size: 24px; color: black; font-weight: bold;">Question {i}:</span>', unsafe_allow_html=True)
        st.write(question)
        answers[atr_name] = st.slider(f'Choose for Question:{i}', 0, 4, 2)

    # Add a button for submission
    if st.button('Submit'):
        st.write('Done!')

        # Ensure all attributes are included and default to 0 if not answered
        for i in range(1, 55):
            if f'Atr{i}' not in answers:
                answers[f'Atr{i}'] = 0  # Default value if not answered

        # Convert answers dictionary to DataFrame with one row
        user_input = pd.DataFrame([answers])
        st.write('User Input DataFrame:')
        st.write(user_input)

        # Make prediction using the AdaBoostClassifier model
        prediction = adaboost.predict(user_input)
        st.subheader('Prediction Result:')
        if prediction[0] == 1:
            st.write('‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏î‡∏µ ')
        else:
            st.write('‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡πÑ‡∏õ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å AI ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô(Ac=99%)')

if __name__ == '__main__':
    main()
